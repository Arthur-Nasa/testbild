// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c95mFDtsQD22zpZcHK8Lci
// Component: pXYVMs4P-l
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: c95mFDtsQD22zpZcHK8Lci/projectcss
import * as sty from "./PlasmicForm.module.css"; // plasmic-import: pXYVMs4P-l/css

export type PlasmicForm__VariantMembers = {};

export type PlasmicForm__VariantsArgs = {};
type VariantPropType = keyof PlasmicForm__VariantsArgs;
export const PlasmicForm__VariantProps = new Array<VariantPropType>();

export type PlasmicForm__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicForm__ArgsType;
export const PlasmicForm__ArgProps = new Array<ArgPropType>("children");

export type PlasmicForm__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  rectangle?: p.Flex<"div">;
  rectangle2?: p.Flex<"div">;
  rectangle3?: p.Flex<"div">;
  button?: p.Flex<"button">;
};

export interface DefaultFormProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicForm__RenderFunc(props: {
  variants: PlasmicForm__VariantsArgs;
  args: PlasmicForm__ArgsType;
  overrides: PlasmicForm__OverridesType;
  dataFetches?: PlasmicForm__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Apply Now For a Home!",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.text__pA1Va
        )}
      >
        {"Preencha o formul√°rio e entraremos em contato"}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.text__yDfK4
        )}
      >
        {"Nome"}
      </div>

      <div
        data-plasmic-name={"rectangle"}
        data-plasmic-override={overrides.rectangle}
        className={classNames(defaultcss.all, sty.rectangle)}
      />

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.text___3Pi20
        )}
      >
        {"Email *"}
      </div>

      <div
        data-plasmic-name={"rectangle2"}
        data-plasmic-override={overrides.rectangle2}
        className={classNames(defaultcss.all, sty.rectangle2)}
      />

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.text__nPdiO
        )}
      >
        {"Telefone"}
      </div>

      <div
        data-plasmic-name={"rectangle3"}
        data-plasmic-override={overrides.rectangle3}
        className={classNames(defaultcss.all, sty.rectangle3)}
      />

      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(
          defaultcss.button,
          defaultcss.__wab_text,
          sty.button
        )}
        disabled={false}
      >
        {"ENVIAR"}
      </button>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "rectangle", "rectangle2", "rectangle3", "button"],
  freeBox: ["freeBox"],
  rectangle: ["rectangle"],
  rectangle2: ["rectangle2"],
  rectangle3: ["rectangle3"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  rectangle: "div";
  rectangle2: "div";
  rectangle3: "div";
  button: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicForm__VariantsArgs;
    args?: PlasmicForm__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicForm__Fetches;
  } & Omit<PlasmicForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicForm__ArgProps,
      internalVariantPropNames: PlasmicForm__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicForm__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicForm";
  } else {
    func.displayName = `PlasmicForm.${nodeName}`;
  }
  return func;
}

export const PlasmicForm = Object.assign(
  // Top-level PlasmicForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    rectangle: makeNodeComponent("rectangle"),
    rectangle2: makeNodeComponent("rectangle2"),
    rectangle3: makeNodeComponent("rectangle3"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicForm
    internalVariantProps: PlasmicForm__VariantProps,
    internalArgProps: PlasmicForm__ArgProps
  }
);

export default PlasmicForm;
/* prettier-ignore-end */
